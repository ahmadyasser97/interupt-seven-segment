
seven segment intrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000962  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005da  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038c  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bb  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	b1 00       	.word	0x00b1	; ????
  56:	bd 00       	.word	0x00bd	; ????
  58:	ca 00       	.word	0x00ca	; ????
  5a:	d7 00       	.word	0x00d7	; ????
  5c:	e4 00       	.word	0x00e4	; ????
  5e:	f1 00       	.word	0x00f1	; ????
  60:	fe 00       	.word	0x00fe	; ????
  62:	0b 01       	movw	r0, r22
  64:	18 01       	movw	r2, r16
  66:	25 01       	movw	r4, r10

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 36       	cpi	r26, 0x61	; 97
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 34 01 	call	0x268	; 0x268 <main>
  88:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <toggel_led>:
			count=0;
			_delay_ms(10000);
		}
}
void toggel_led(void){
	toggel_bit(led_port,2);
  90:	95 b3       	in	r25, 0x15	; 21
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	89 27       	eor	r24, r25
  96:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	83 ed       	ldi	r24, 0xD3	; 211
  9c:	90 e3       	ldi	r25, 0x30	; 48
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <toggel_led+0xe>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <toggel_led+0x18>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <__vector_1>:
#define led_port		PORTC
#define led_dd			DDRC

		volatile unsigned char count =0;
		void toggel_led(void);
ISR(INT0_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	  toggel_led();
  ce:	0e 94 48 00 	call	0x90	; 0x90 <toggel_led>
		count++;
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  dc:	2a ea       	ldi	r18, 0xAA	; 170
  de:	36 ee       	ldi	r19, 0xE6	; 230
  e0:	86 e9       	ldi	r24, 0x96	; 150
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__vector_1+0x38>
  ee:	00 00       	nop
		_delay_ms(10000);
		if(count==9){
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f4:	89 30       	cpi	r24, 0x09	; 9
  f6:	61 f4       	brne	.+24     	; 0x110 <__vector_1+0x64>
			count=0;
  f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  fc:	2a ea       	ldi	r18, 0xAA	; 170
  fe:	36 ee       	ldi	r19, 0xE6	; 230
 100:	86 e9       	ldi	r24, 0x96	; 150
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	d9 f7       	brne	.-10     	; 0x104 <__vector_1+0x58>
 10e:	00 00       	nop
			_delay_ms(10000);
		}
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <sevensegment>:
void toggel_led(void){
	toggel_bit(led_port,2);
	_delay_ms(1000);
}
void sevensegment(void){
		set_bit(seg_con_port,E1);
 132:	c1 9a       	sbi	0x18, 1	; 24
		set_bit(seg_con_port,E2);
 134:	c2 9a       	sbi	0x18, 2	; 24
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	33 ed       	ldi	r19, 0xD3	; 211
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <sevensegment+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <sevensegment+0x14>
 146:	00 00       	nop
		_delay_ms(1000);
		

		switch (count)
 148:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 14c:	8e 2f       	mov	r24, r30
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	8a 30       	cpi	r24, 0x0A	; 10
 152:	91 05       	cpc	r25, r1
 154:	08 f0       	brcs	.+2      	; 0x158 <sevensegment+0x26>
 156:	86 c0       	rjmp	.+268    	; 0x264 <sevensegment+0x132>
 158:	fc 01       	movw	r30, r24
 15a:	e6 5d       	subi	r30, 0xD6	; 214
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	0c 94 42 01 	jmp	0x284	; 0x284 <__tablejump2__>
		{
			case 0:
			seg_port = 0x00;
 162:	1b ba       	out	0x1b, r1	; 27
 164:	9a ea       	ldi	r25, 0xAA	; 170
 166:	26 ee       	ldi	r18, 0xE6	; 230
 168:	36 e9       	ldi	r19, 0x96	; 150
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	91 50       	subi	r25, 0x01	; 1
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	30 40       	sbci	r19, 0x00	; 0
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	d9 f7       	brne	.-10     	; 0x16c <sevensegment+0x3a>
 176:	00 00       	nop
 178:	08 95       	ret
			_delay_ms(10000);
			break;
			case 1:
			seg_port = 0x10;
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	9a ea       	ldi	r25, 0xAA	; 170
 180:	26 ee       	ldi	r18, 0xE6	; 230
 182:	36 e9       	ldi	r19, 0x96	; 150
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	91 50       	subi	r25, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	30 40       	sbci	r19, 0x00	; 0
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	d9 f7       	brne	.-10     	; 0x186 <sevensegment+0x54>
 190:	00 00       	nop
 192:	08 95       	ret
			_delay_ms(10000);
			break;
			case 2:
			seg_port = 0x20;
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	8b bb       	out	0x1b, r24	; 27
 198:	9a ea       	ldi	r25, 0xAA	; 170
 19a:	26 ee       	ldi	r18, 0xE6	; 230
 19c:	36 e9       	ldi	r19, 0x96	; 150
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <sevensegment+0x6e>
 1aa:	00 00       	nop
 1ac:	08 95       	ret
			_delay_ms(10000);
			break;
			case 3:
			seg_port = 0x30;
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	8b bb       	out	0x1b, r24	; 27
 1b2:	9a ea       	ldi	r25, 0xAA	; 170
 1b4:	26 ee       	ldi	r18, 0xE6	; 230
 1b6:	36 e9       	ldi	r19, 0x96	; 150
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	30 40       	sbci	r19, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <sevensegment+0x88>
 1c4:	00 00       	nop
 1c6:	08 95       	ret
			_delay_ms(10000);
			break;
			case 4:
			seg_port = 0x40;
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	9a ea       	ldi	r25, 0xAA	; 170
 1ce:	26 ee       	ldi	r18, 0xE6	; 230
 1d0:	36 e9       	ldi	r19, 0x96	; 150
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	91 50       	subi	r25, 0x01	; 1
 1d6:	20 40       	sbci	r18, 0x00	; 0
 1d8:	30 40       	sbci	r19, 0x00	; 0
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <sevensegment+0xa2>
 1de:	00 00       	nop
 1e0:	08 95       	ret
			_delay_ms(10000);
			break;
			case 5:
			seg_port = 0x50;
 1e2:	80 e5       	ldi	r24, 0x50	; 80
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	9a ea       	ldi	r25, 0xAA	; 170
 1e8:	26 ee       	ldi	r18, 0xE6	; 230
 1ea:	36 e9       	ldi	r19, 0x96	; 150
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	91 50       	subi	r25, 0x01	; 1
 1f0:	20 40       	sbci	r18, 0x00	; 0
 1f2:	30 40       	sbci	r19, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <sevensegment+0xbc>
 1f8:	00 00       	nop
 1fa:	08 95       	ret
			_delay_ms(10000);
			break;
			case 6:
			seg_port = 0x60;
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	9a ea       	ldi	r25, 0xAA	; 170
 202:	26 ee       	ldi	r18, 0xE6	; 230
 204:	36 e9       	ldi	r19, 0x96	; 150
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	d9 f7       	brne	.-10     	; 0x208 <sevensegment+0xd6>
 212:	00 00       	nop
 214:	08 95       	ret
			_delay_ms(10000);
			break;
			case 7:
			seg_port = 0x70;
 216:	80 e7       	ldi	r24, 0x70	; 112
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	9a ea       	ldi	r25, 0xAA	; 170
 21c:	26 ee       	ldi	r18, 0xE6	; 230
 21e:	36 e9       	ldi	r19, 0x96	; 150
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	91 50       	subi	r25, 0x01	; 1
 224:	20 40       	sbci	r18, 0x00	; 0
 226:	30 40       	sbci	r19, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	d9 f7       	brne	.-10     	; 0x222 <sevensegment+0xf0>
 22c:	00 00       	nop
 22e:	08 95       	ret
			_delay_ms(10000);
			break;
			case 8:
			seg_port = 0x80;
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	8b bb       	out	0x1b, r24	; 27
 234:	9a ea       	ldi	r25, 0xAA	; 170
 236:	26 ee       	ldi	r18, 0xE6	; 230
 238:	36 e9       	ldi	r19, 0x96	; 150
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	91 50       	subi	r25, 0x01	; 1
 23e:	20 40       	sbci	r18, 0x00	; 0
 240:	30 40       	sbci	r19, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	d9 f7       	brne	.-10     	; 0x23c <sevensegment+0x10a>
 246:	00 00       	nop
 248:	08 95       	ret
			_delay_ms(10000);
			break;
			case 9:
			seg_port = 0x90;
 24a:	80 e9       	ldi	r24, 0x90	; 144
 24c:	8b bb       	out	0x1b, r24	; 27
 24e:	9a ea       	ldi	r25, 0xAA	; 170
 250:	26 ee       	ldi	r18, 0xE6	; 230
 252:	36 e9       	ldi	r19, 0x96	; 150
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	91 50       	subi	r25, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	d9 f7       	brne	.-10     	; 0x256 <sevensegment+0x124>
 260:	00 00       	nop
 262:	08 95       	ret
			_delay_ms(10000);
			break;
			default:
			seg_con_port = 0x00;
 264:	18 ba       	out	0x18, r1	; 24
 266:	08 95       	ret

00000268 <main>:
		}
}

int main(void)
{
	set_bit(led_dd,1);
 268:	a1 9a       	sbi	0x14, 1	; 20
	set_bit(GICR,INT0);
 26a:	8b b7       	in	r24, 0x3b	; 59
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	8b bf       	out	0x3b, r24	; 59
	clear_bit(MCUCR,ISC00);
 270:	85 b7       	in	r24, 0x35	; 53
 272:	8e 7f       	andi	r24, 0xFE	; 254
 274:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 276:	85 b7       	in	r24, 0x35	; 53
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	85 bf       	out	0x35, r24	; 53
	sei();
 27c:	78 94       	sei
	
	/* Replace with your application code */
	while (1)  {
		sevensegment();
 27e:	0e 94 99 00 	call	0x132	; 0x132 <sevensegment>
 282:	fd cf       	rjmp	.-6      	; 0x27e <main+0x16>

00000284 <__tablejump2__>:
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	05 90       	lpm	r0, Z+
 28a:	f4 91       	lpm	r31, Z
 28c:	e0 2d       	mov	r30, r0
 28e:	09 94       	ijmp

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
